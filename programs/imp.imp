(* Types for the abstract syntax trees of IMP *)
(* type l = string *)

type op = Plus | Mic                  (* op ::= + | <=           *)
;;
type e =                              (* e ::=                   *)
    Int of int                        (*     n                   *)
  | Bool of bool                      (*   | b                   *)
  | Op of e * op * e                  (*   | e op e              *)
  | If of e * e * e                   (*   | if e then e else e  *)
  | Loc of string                          (*   | ! l                 *)
  | Atrib of string * e                    (*   | l := e              *)
  | Skip                              (*   | skip                *)
  | Secv of e * e                     (*   | e ; e               *)
  | While of e * e                    (*   | while e do e        *)
;;

(* The state is a list of pairs (location,integer) *)
(* type state = (l * int) list *)
type state =
    EmptyState
  | ConsState of ((string*int)*state)
;;

type stateOption =
    NoState
  | SomeState of state
;;

type intOption =
    NoInt
  | SomeInt of int
;;

type configOption =
    NoConfig
  | SomeConfig of e * state
;;

let rec lookup : string -> state -> intOption = fun (x:string) -> function
    EmptyState -> NoInt
  | ConsState (((y:string),(v:int)), (s:state))
    -> if x=y then SomeInt v else lookup x s
;;

let rec update : string*int -> state -> stateOption
  = fun ((x:string),(n:int)) -> function
        EmptyState -> NoState
      | ConsState(((y:string),(v:int)),(s:state))
        -> if x=y
           then SomeState (ConsState((x,n),s))
           else match update (x,n) s with
               NoState -> NoState
             | SomeState (s':state) -> SomeState (ConsState((y,v),s'))
;;

(* Configuration is described as an expression-state pair *)
(* type config = e * state *)


(* The reduce function defines the one step relation.  It is again partial
   as it has to account for final and stuck configurations  *)
let rec reduce : e * state -> configOption = function
(*
  | (Op(Int n1,Plus,Int n2),s) -> Some (Int (n1+n2),s)             (*Op+*)
  | (Op(Int n1,Mic,Int n2),s) -> Some (Bool (n1<=n2),s)            (*Op<=*)
  | (Op(Int n1,op,e2),s) ->                                        (*OpD*)
    (match reduce (e2,s) with
      | None -> None
      | Some (e2',s') -> Some (Op(Int n1,op,e2'),s')
    )
  | (Op(e1,op,e2),s) ->                                            (*OpS*)
    (match reduce (e1,s) with
      | None -> None
      | Some (e1',s') -> Some (Op(e1',op,e2),s')
    )
  | (Loc l, s) ->                                                  (*Loc*)
    (match lookup l s with
      | None -> None
      | Some n -> Some (Int n, s)
    )
  | (Atrib(l, Int n),s) ->                                         (*Atrib*)
    (match update (l,n) s with
      | None -> None
      | Some s' -> Some (Skip, s')
    )
  | (Atrib(l,e),s) ->                                              (*AtribD*)
    (match reduce (e,s) with
      | None -> None
      | Some (e',s') -> Some (Atrib(l,e'),s')
    )
  | (Secv(Skip,e),s) -> Some (e,s)                                 (*Secv*)
  | (Secv(e1,e2),s) ->                                             (*SecvS*)
    (match reduce (e1,s) with
      | None -> None
      | Some (e1',s') -> Some (Secv(e1',e2),s')
    )
  | (If(Bool true,e1,e2),s) -> Some (e1,s)                         (*IfTrue*)
  | (If(Bool false,e1,e2),s) -> Some (e2,s)                        (*IfFalse*)
  | (If(e,e1,e2),s) ->                                             (*IfS*)
    (match reduce (e,s) with
      | None -> None
      | Some (e',s') -> Some (If(e',e1,e2),s')
    )
  | (While(e1,e2),s) -> Some (If(e1,Secv(e2,While(e1,e2)),Skip),s) (*While*)
*)
   (_:e*state) -> NoConfig
;;


let test_pgm = Secv(Atrib("y", Int 0),
                    While(Op(Int 1,Mic, Loc "x"),
                          Secv(Atrib("y", Op(Loc "y", Plus, Loc "x")),
                               Atrib("x", Op(Loc "x", Plus, Int (-1))))))
;;
let test_state = fun (n:int) -> ConsState(("x",n),ConsState(("y",0),EmptyState))
;;
let test_config = fun (n:int) -> (test_pgm,test_state n)
;;

reduce (test_config 10);;

(*

(* evaluate basically computes the transitive closure ->* of the
   one step reduction relation. *)
let rec evaluate c = match reduce c with
  | None -> c
  | Some c' -> evaluate c'


let test_pgm = Secv(Atrib("y", Int 0),
                    While(Op(Int 1,Mic, Loc "x"),
                          Secv(Atrib("y", Op(Loc "y", Plus, Loc "x")), 
                               Atrib("x", Op(Loc "x", Plus, Int (-1))))))


let test_config n = (test_pgm,[("x",n);("y", 0)])

(*
   z := 0 ;
    while 1 <= !x do 
      z := !z + !y;   
      x := !x + -1
    done
*)

let inmulteste_pgm = Secv(Atrib("z", Int 0),
                          While(Op(Int 1, Mic, Loc "x"),
                                Secv(Atrib("z",Op(Loc "z", Plus, Loc "y")),
                                     Atrib("x",Op(Loc "x", Plus, Int (-1))))))

let inmulteste_config m n = (inmulteste_pgm, [("x",m);("y",n);("z",0)])

(*
  n!

  f := !n ;
  while 2 <= !n do
    n := !n + -1;
    x := !n;
    y := !f;
    z := 0 ;
    while 1 <= !x do 
      z := !z + !y;   
      x := !x + -1
    done ;
    f := !z
  done
*)

let fact_pgm = 
  Secv(Atrib("f", Loc "n"),
  Secv(While(Op(Int 2, Mic, Loc "n"),
        Secv(Atrib("n", Op(Loc "n", Plus, Int (-1))),
        Secv(Atrib("x", Loc "n"),
        Secv(Atrib("y", Loc "f"),
        Secv(inmulteste_pgm,
             Atrib("f", Loc "z")
             ))))),
      Loc "f"))

let fact_config n = (fact_pgm, [("n",n);("f",0);("x",0);("y",0);("z",0)])
*)
